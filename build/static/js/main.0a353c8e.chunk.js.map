{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","alchemyKey","process","REACT_APP_ALCHEMY_KEY","web3","createAlchemyWeb3","contractABI","contractAddress","contract","eth","Contract","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","rel","href","mintPower","nftQuantity","success","transactionParameters","to","from","selectedAddress","value","parseInt","utils","toWei","toString","data","methods","encodeABI","params","txHash","getCurrentWalletConnected","length","Minter","props","useState","walletAddress","setWallet","setStatus","maxMint","setMaxMint","maxSupply","setMaxSupply","totalMinted","setTotalMinted","setNftQuantity","addWalletListener","on","accounts","useEffect","MAX_PUBLIC_MINT","call","MAX_SUPPLY","totalSupply","fetchData","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a353c8e.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";\nexport const contract = new web3.eth.Contract(contractABI, contractAddress);\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Sale is live above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const mintPower = async(nftQuantity) => {\n    //error handling\n    if (nftQuantity === 0) { \n           return {\n               success: false,\n               status: \"❗Please make sure quantity is bigger than 0.\",\n           }\n     }\n     if (nftQuantity > 5) { \n      return {\n          success: false,\n          status: \"❗Please make sure quantity is less than or equal to 5.\",\n      }\n}\n   \n     \n     //load smart contract\n     window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n   \n     //set up your Ethereum transaction\n const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: parseInt(web3.utils.toWei(\"0.05\",\"ether\") * nftQuantity).toString(16),\n    data: window.contract.methods.mintPower(nftQuantity).encodeABI() //make call to NFT smart contract \n};\n\n//sign the transaction via Metamask\ntry {\nconst txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    })\nreturn {\n    success: true,\n    status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash,\n\n}\n} catch (error) {\nreturn {\n    success: false,\n    status: \"😥 Something went wrong: \" + error.message\n}\n\n}\n   }\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Sale is live above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };","import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintPower, contract} from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [maxMint, setMaxMint] = useState(\"\");\n  const [maxSupply, setMaxSupply] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(\"\");\n  const [nftQuantity, setNftQuantity] = useState(0);\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Sale is live above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\nuseEffect(() => {\n  async function fetchData() {\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status); \n\n    addWalletListener(); \n\n    const maxMint = await contract.methods.MAX_PUBLIC_MINT().call();\n      setMaxMint(maxMint);\n    const maxSupply =  await contract.methods.MAX_SUPPLY().call();\n    setMaxSupply(maxSupply);\n    const totalMinted = await contract.methods.totalSupply().call();\n    setTotalMinted(totalMinted);\n  }\n  fetchData();\n}, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { status } = await mintPower(nftQuantity);\n    setStatus(status);\n\n\n    \n  \n};\n\n\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">NFT Power Minter</h1>\n      <h2>🖼 {totalMinted}/{maxSupply}</h2>\n      <p>\n        Simply add the number of NFTs you want to mint, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>✍️ NFT Quantity({maxMint}-MAX): </h2>\n        <input\n          type=\"number\"\n          placeholder=\"0\"\n          onChange={(event) => setNftQuantity(event.target.value)}\n        />\n      </form> \n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}