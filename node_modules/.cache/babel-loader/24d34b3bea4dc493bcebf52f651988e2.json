{"ast":null,"code":"var _jsxFileName = \"/Users/Macbook/nft-minter-practice/nft-minter-tutorial/minter-starter-files/src/utils/interact.js\";\nimport { pinJSONToIPFS } from './pinata.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\n\nconst contractAddress = \"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};\nexport const mintPower = async (url, name, description) => {\n  //error handling\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\"\n    };\n  } //make metadata\n\n\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description; //make pinata call\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\"\n    };\n  }\n\n  const tokenURI = pinataResponse.pinataUrl; //load smart contract\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    data: window.contract.methods.mintPower(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n\n  }; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/Macbook/nft-minter-practice/nft-minter-tutorial/minter-starter-files/src/utils/interact.js"],"names":["pinJSONToIPFS","require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","mintPower","url","name","description","trim","success","metadata","Object","image","pinataResponse","tokenURI","pinataUrl","contract","eth","Contract","transactionParameters","to","from","selectedAddress","data","methods","encodeABI","txHash","params","error","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import {pinJSONToIPFS} from './pinata.js';\n\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const mintPower = async(url, name, description) => {\n    //error handling\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \n           return {\n               success: false,\n               status: \"❗Please make sure all fields are completed before minting.\",\n           }\n     }\n   \n     //make metadata\n     const metadata = new Object();\n     metadata.name = name;\n     metadata.image = url;\n     metadata.description = description;\n   \n     //make pinata call\n     const pinataResponse = await pinJSONToIPFS(metadata);\n     if (!pinataResponse.success) {\n         return {\n             success: false,\n             status: \"😢 Something went wrong while uploading your tokenURI.\",\n         }\n     } \n     const tokenURI = pinataResponse.pinataUrl; \n     \n     //load smart contract\n     window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n     //set up your Ethereum transaction\n const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods.mintPower(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract \n};\n\n//sign the transaction via Metamask\ntry {\nconst txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\nreturn {\n    success: true,\n    status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash\n}\n} catch (error) {\nreturn {\n    success: false,\n    status: \"😥 Something went wrong: \" + error.message\n}\n\n}\n   }\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };"]},"metadata":{},"sourceType":"module"}