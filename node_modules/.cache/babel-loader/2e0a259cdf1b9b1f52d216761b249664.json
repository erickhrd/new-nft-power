{"ast":null,"code":"import _regeneratorRuntime from\"/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{connectWallet,getCurrentWalletConnected,mintPower,contract}from\"./utils/interact.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Minter=function Minter(props){//State variables\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),walletAddress=_useState2[0],setWallet=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),status=_useState4[0],setStatus=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),maxMint=_useState6[0],setMaxMint=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),maxSupply=_useState8[0],setMaxSupply=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),totalMinted=_useState10[0],setTotalMinted=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),nftQuantity=_useState12[0],setNftQuantity=_useState12[1];function addWalletListener(){if(window.ethereum){window.ethereum.on(\"accountsChanged\",function(accounts){if(accounts.length>0){setWallet(accounts[0]);setStatus(\"👆🏽 Sale is live above.\");}else{setWallet(\"\");setStatus(\"🦊 Connect to Metamask using the top right button.\");}});}else{setStatus(/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{target:\"_blank\",rel:\"noreferrer\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]}));}}useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$getCurrentWall,address,status,maxMint,maxSupply,totalMinted;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getCurrentWalletConnected();case 2:_yield$getCurrentWall=_context.sent;address=_yield$getCurrentWall.address;status=_yield$getCurrentWall.status;setWallet(address);setStatus(status);addWalletListener();_context.next=10;return contract.methods.MAX_PUBLIC_MINT().call();case 10:maxMint=_context.sent;setMaxMint(maxMint);_context.next=14;return contract.methods.MAX_SUPPLY().call();case 14:maxSupply=_context.sent;setMaxSupply(maxSupply);_context.next=18;return contract.methods.totalSupply().call();case 18:totalMinted=_context.sent;setTotalMinted(totalMinted);case 20:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[]);var connectWalletPressed=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var walletResponse;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return connectWallet();case 2:walletResponse=_context2.sent;setStatus(walletResponse.status);setWallet(walletResponse.address);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function connectWalletPressed(){return _ref.apply(this,arguments);};}();var onMintPressed=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _yield$mintPower,status;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return mintPower(nftQuantity);case 2:_yield$mintPower=_context3.sent;status=_yield$mintPower.status;setStatus(status);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function onMintPressed(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"Minter\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"walletButton\",onClick:connectWalletPressed,children:walletAddress.length>0?\"Connected: \"+String(walletAddress).substring(0,6)+\"...\"+String(walletAddress).substring(38):/*#__PURE__*/_jsx(\"span\",{children:\"Connect Wallet\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h1\",{id:\"title\",children:\"NFT Power Minter\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\uD83D\\uDDBC \",totalMinted,\"/\",maxSupply]}),/*#__PURE__*/_jsx(\"p\",{children:\"Simply add the number of NFTs you want to mint, then press \\\"Mint.\\\"\"}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\u270D\\uFE0F NFT Quantity(\",maxMint,\"-MAX): \"]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"0\",onChange:function onChange(event){return setNftQuantity(event.target.value);}})]}),/*#__PURE__*/_jsx(\"button\",{id:\"mintButton\",onClick:onMintPressed,children:\"Mint NFT\"}),/*#__PURE__*/_jsx(\"p\",{id:\"status\",children:status})]});};export default Minter;","map":{"version":3,"sources":["/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintPower","contract","Minter","props","walletAddress","setWallet","status","setStatus","maxMint","setMaxMint","maxSupply","setMaxSupply","totalMinted","setTotalMinted","nftQuantity","setNftQuantity","addWalletListener","window","ethereum","on","accounts","length","fetchData","address","methods","MAX_PUBLIC_MINT","call","MAX_SUPPLY","totalSupply","connectWalletPressed","walletResponse","onMintPressed","String","substring","event","target","value"],"mappings":"4hBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,aAAT,CAAwBC,yBAAxB,CAAmDC,SAAnD,CAA8DC,QAA9D,KAA6E,qBAA7E,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CAExB;AAFwB,cAGWN,QAAQ,CAAC,EAAD,CAHnB,wCAGjBO,aAHiB,eAGFC,SAHE,8BAIIR,QAAQ,CAAC,EAAD,CAJZ,yCAIjBS,MAJiB,eAITC,SAJS,8BAKMV,QAAQ,CAAC,EAAD,CALd,yCAKjBW,OALiB,eAKRC,UALQ,8BAMUZ,QAAQ,CAAC,EAAD,CANlB,yCAMjBa,SANiB,eAMNC,YANM,8BAOcd,QAAQ,CAAC,EAAD,CAPtB,0CAOjBe,WAPiB,gBAOJC,cAPI,gCAQchB,QAAQ,CAAC,CAAD,CARtB,2CAQjBiB,WARiB,gBAQJC,cARI,gBASxB,QAASC,CAAAA,iBAAT,EAA6B,CAC3B,GAAIC,MAAM,CAACC,QAAX,CAAqB,CACnBD,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,CAAsC,SAACC,QAAD,CAAc,CAClD,GAAIA,QAAQ,CAACC,MAAT,CAAkB,CAAtB,CAAyB,CACvBhB,SAAS,CAACe,QAAQ,CAAC,CAAD,CAAT,CAAT,CACAb,SAAS,CAAC,0BAAD,CAAT,CACD,CAHD,IAGO,CACLF,SAAS,CAAC,EAAD,CAAT,CACAE,SAAS,CAAC,oDAAD,CAAT,CACD,CACF,CARD,EASD,CAVD,IAUO,CACLA,SAAS,cACP,qBACG,GADH,gBAEK,GAFL,cAGE,UAAG,MAAM,CAAC,QAAV,CAAmB,GAAG,CAAC,YAAvB,CAAoC,IAAI,oCAAxC,oFAHF,GADO,CAAT,CAUD,CACF,CAEHX,SAAS,CAAC,UAAM,SACC0B,CAAAA,SADD,qIACd,gOACkCvB,CAAAA,yBAAyB,EAD3D,4CACSwB,OADT,uBACSA,OADT,CACkBjB,MADlB,uBACkBA,MADlB,CAEED,SAAS,CAACkB,OAAD,CAAT,CACAhB,SAAS,CAACD,MAAD,CAAT,CAEAU,iBAAiB,GALnB,uBAOwBf,CAAAA,QAAQ,CAACuB,OAAT,CAAiBC,eAAjB,GAAmCC,IAAnC,EAPxB,SAOQlB,OAPR,eAQIC,UAAU,CAACD,OAAD,CAAV,CARJ,uBAS2BP,CAAAA,QAAQ,CAACuB,OAAT,CAAiBG,UAAjB,GAA8BD,IAA9B,EAT3B,SASQhB,SATR,eAUEC,YAAY,CAACD,SAAD,CAAZ,CAVF,uBAW4BT,CAAAA,QAAQ,CAACuB,OAAT,CAAiBI,WAAjB,GAA+BF,IAA/B,EAX5B,SAWQd,WAXR,eAYEC,cAAc,CAACD,WAAD,CAAd,CAZF,uDADc,4CAedU,SAAS,GACV,CAhBQ,CAgBN,EAhBM,CAAT,CAkBE,GAAMO,CAAAA,oBAAoB,0FAAG,kLACE/B,CAAAA,aAAa,EADf,QACrBgC,cADqB,gBAE3BvB,SAAS,CAACuB,cAAc,CAACxB,MAAhB,CAAT,CACAD,SAAS,CAACyB,cAAc,CAACP,OAAhB,CAAT,CAH2B,wDAAH,kBAApBM,CAAAA,oBAAoB,0CAA1B,CAMA,GAAME,CAAAA,aAAa,2FAAG,2LACK/B,CAAAA,SAAS,CAACc,WAAD,CADd,wCACZR,MADY,kBACZA,MADY,CAEpBC,SAAS,CAACD,MAAD,CAAT,CAFoB,wDAAH,kBAAbyB,CAAAA,aAAa,2CAAnB,CAWA,mBACE,aAAK,SAAS,CAAC,QAAf,wBACE,eAAQ,EAAE,CAAC,cAAX,CAA0B,OAAO,CAAEF,oBAAnC,UACGzB,aAAa,CAACiB,MAAd,CAAuB,CAAvB,CACC,cACAW,MAAM,CAAC5B,aAAD,CAAN,CAAsB6B,SAAtB,CAAgC,CAAhC,CAAmC,CAAnC,CADA,CAEA,KAFA,CAGAD,MAAM,CAAC5B,aAAD,CAAN,CAAsB6B,SAAtB,CAAgC,EAAhC,CAJD,cAMC,wCAPJ,EADF,cAYE,aAZF,cAaE,WAAI,EAAE,CAAC,OAAP,8BAbF,cAcE,sCAAQrB,WAAR,KAAsBF,SAAtB,GAdF,cAeE,2FAfF,cAkBE,qCACE,mDAAqBF,OAArB,aADF,cAEE,cACE,IAAI,CAAC,QADP,CAEE,WAAW,CAAC,GAFd,CAGE,QAAQ,CAAE,kBAAC0B,KAAD,QAAWnB,CAAAA,cAAc,CAACmB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAzB,EAHZ,EAFF,GAlBF,cA0BE,eAAQ,EAAE,CAAC,YAAX,CAAwB,OAAO,CAAEL,aAAjC,sBA1BF,cA6BE,UAAG,EAAE,CAAC,QAAN,UACGzB,MADH,EA7BF,GADF,CAmCD,CAxGD,CA0GA,cAAeJ,CAAAA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintPower, contract} from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [maxMint, setMaxMint] = useState(\"\");\n  const [maxSupply, setMaxSupply] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(\"\");\n  const [nftQuantity, setNftQuantity] = useState(0);\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Sale is live above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\nuseEffect(() => {\n  async function fetchData() {\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status); \n\n    addWalletListener(); \n\n    const maxMint = await contract.methods.MAX_PUBLIC_MINT().call();\n      setMaxMint(maxMint);\n    const maxSupply =  await contract.methods.MAX_SUPPLY().call();\n    setMaxSupply(maxSupply);\n    const totalMinted = await contract.methods.totalSupply().call();\n    setTotalMinted(totalMinted);\n  }\n  fetchData();\n}, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { status } = await mintPower(nftQuantity);\n    setStatus(status);\n\n\n    \n  \n};\n\n\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">NFT Power Minter</h1>\n      <h2>🖼 {totalMinted}/{maxSupply}</h2>\n      <p>\n        Simply add the number of NFTs you want to mint, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>✍️ NFT Quantity({maxMint}-MAX): </h2>\n        <input\n          type=\"number\"\n          placeholder=\"0\"\n          onChange={(event) => setNftQuantity(event.target.value)}\n        />\n      </form> \n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}