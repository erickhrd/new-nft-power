{"ast":null,"code":"var _jsxFileName = \"/Users/Macbook/nft-minter-practice/nft-minter-tutorial/minter-starter-files/src/Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintPower, contract } from \"./utils/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [maxMint, setMaxMint] = useState(\"\");\n  const [maxSupply, setMaxSupply] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(\"\");\n  const [nftQuantity, setNftQuantity] = useState(0);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      const {\n        address,\n        status\n      } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n      addWalletListener();\n      const maxMint = await contract.methods.MAX_PUBLIC_MINT().call();\n      setMaxMint(maxMint);\n      const maxSupply = await contract.methods.MAX_SUPPLY().call();\n      setMaxSupply(maxSupply);\n      const totalMinted = await contract.methods.totalSupply().call();\n      setTotalMinted(totalMinted);\n    }\n\n    fetchData();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const {\n      status\n    } = await mintPower(nftQuantity);\n    setStatus(status);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"title\",\n      children: \"NFT Power Minter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u270D\\uFE0F \", totalMinted, \"/\", maxSupply]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Simply add the number of NFTs you want to mint, then press \\\"Mint.\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u270D\\uFE0F NFT Quantity(\", maxMint, \"-MAX): \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"0\",\n        onChange: event => setNftQuantity(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: onMintPressed,\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minter, \"I3ckscUAOOZPUnjQVoVLR4rrEvs=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/Macbook/nft-minter-practice/nft-minter-tutorial/minter-starter-files/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintPower","contract","Minter","props","walletAddress","setWallet","status","setStatus","maxMint","setMaxMint","maxSupply","setMaxSupply","totalMinted","setTotalMinted","nftQuantity","setNftQuantity","addWalletListener","window","ethereum","on","accounts","length","fetchData","address","methods","MAX_PUBLIC_MINT","call","MAX_SUPPLY","totalSupply","connectWalletPressed","walletResponse","onMintPressed","String","substring","event","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintPower, contract} from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [maxMint, setMaxMint] = useState(\"\");\n  const [maxSupply, setMaxSupply] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(\"\");\n  const [nftQuantity, setNftQuantity] = useState(0);\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\nuseEffect(() => {\n  async function fetchData() {\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status); \n\n    addWalletListener(); \n\n    const maxMint = await contract.methods.MAX_PUBLIC_MINT().call();\n      setMaxMint(maxMint);\n    const maxSupply =  await contract.methods.MAX_SUPPLY().call();\n    setMaxSupply(maxSupply);\n    const totalMinted = await contract.methods.totalSupply().call();\n    setTotalMinted(totalMinted);\n  }\n  fetchData();\n}, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { status } = await mintPower(nftQuantity);\n    setStatus(status);\n\n\n    \n  \n};\n\n\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">NFT Power Minter</h1>\n      <h2>✍️ {totalMinted}/{maxSupply}</h2>\n      {/* <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form> */}\n      <p>\n        Simply add the number of NFTs you want to mint, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>✍️ NFT Quantity({maxMint}-MAX): </h2>\n        <input\n          type=\"number\"\n          placeholder=\"0\"\n          onChange={(event) => setNftQuantity(event.target.value)}\n        />\n      </form> \n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}