{"ast":null,"code":"var _jsxFileName = \"/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/src/utils/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// import {pinJSONToIPFS} from './pinata.js';\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\n\nconst contractAddress = \"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";\nexport const contract = new web3.eth.Contract(contractABI, contractAddress);\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};\nexport const mintPower = async nftQuantity => {\n  //error handling\n  if (nftQuantity === 0) {\n    return {\n      success: false,\n      status: \"❗Please make sure quantity is bigger than 0.\"\n    };\n  }\n\n  if (nftQuantity > 5) {\n    return {\n      success: false,\n      status: \"❗Please make sure quantity is less than or equal to 5.\"\n    };\n  } //  //make metadata\n  //  const metadata = new Object();\n  //  metadata.name = name;\n  //  metadata.image = url;\n  //  metadata.description = description;\n  //  //make pinata call\n  //  const pinataResponse = await pinJSONToIPFS(metadata);\n  //  if (!pinataResponse.success) {\n  //      return {\n  //          success: false,\n  //          status: \"😢 Something went wrong while uploading your tokenURI.\",\n  //      }\n  //  } \n  //  const tokenURI = pinataResponse.pinataUrl; \n  //load smart contract\n\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    value: parseInt(web3.utils.toWei(\"0.05\", \"ether\") * nftQuantity).toString(16),\n    data: window.contract.methods.mintPower(nftQuantity).encodeABI() //make call to NFT smart contract \n\n  }; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/src/utils/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","contract","eth","Contract","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","mintPower","nftQuantity","success","transactionParameters","to","from","selectedAddress","value","parseInt","utils","toWei","toString","data","methods","encodeABI","txHash","params","error","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["// import {pinJSONToIPFS} from './pinata.js';\n\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";\nexport const contract = new web3.eth.Contract(contractABI, contractAddress);\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const mintPower = async(nftQuantity) => {\n    //error handling\n    if (nftQuantity === 0) { \n           return {\n               success: false,\n               status: \"❗Please make sure quantity is bigger than 0.\",\n           }\n     }\n     if (nftQuantity > 5) { \n      return {\n          success: false,\n          status: \"❗Please make sure quantity is less than or equal to 5.\",\n      }\n}\n   \n    //  //make metadata\n    //  const metadata = new Object();\n    //  metadata.name = name;\n    //  metadata.image = url;\n    //  metadata.description = description;\n   \n    //  //make pinata call\n    //  const pinataResponse = await pinJSONToIPFS(metadata);\n    //  if (!pinataResponse.success) {\n    //      return {\n    //          success: false,\n    //          status: \"😢 Something went wrong while uploading your tokenURI.\",\n    //      }\n    //  } \n    //  const tokenURI = pinataResponse.pinataUrl; \n     \n     //load smart contract\n     window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n   \n     //set up your Ethereum transaction\n const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: parseInt(web3.utils.toWei(\"0.05\",\"ether\") * nftQuantity).toString(16),\n    data: window.contract.methods.mintPower(nftQuantity).encodeABI() //make call to NFT smart contract \n};\n\n//sign the transaction via Metamask\ntry {\nconst txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    })\nreturn {\n    success: true,\n    status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash,\n\n}\n} catch (error) {\nreturn {\n    success: false,\n    status: \"😥 Something went wrong: \" + error.message\n}\n\n}\n   }\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };"]},"metadata":{},"sourceType":"module"}