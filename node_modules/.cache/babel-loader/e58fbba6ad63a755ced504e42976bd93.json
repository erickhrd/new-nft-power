{"ast":null,"code":"import _regeneratorRuntime from\"/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";require('dotenv').config();var alchemyKey=process.env.REACT_APP_ALCHEMY_KEY;var _require=require(\"@alch/alchemy-web3\"),createAlchemyWeb3=_require.createAlchemyWeb3;var web3=createAlchemyWeb3(alchemyKey);var contractABI=require('../contract-abi.json');var contractAddress=\"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";export var contract=new web3.eth.Contract(contractABI,contractAddress);export var connectWallet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var addressArray,obj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.ethereum){_context.next=14;break;}_context.prev=1;_context.next=4;return window.ethereum.request({method:\"eth_requestAccounts\"});case 4:addressArray=_context.sent;obj={status:\"👆🏽 Sale is live above.\",address:addressArray[0]};return _context.abrupt(\"return\",obj);case 9:_context.prev=9;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",{address:\"\",status:\"😥 \"+_context.t0.message});case 12:_context.next=15;break;case 14:return _context.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{target:\"_blank\",rel:\"noreferrer\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]})})});case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,9]]);}));return function connectWallet(){return _ref.apply(this,arguments);};}();export var mintPower=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(nftQuantity){var transactionParameters,txHash;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(nftQuantity===0)){_context2.next=2;break;}return _context2.abrupt(\"return\",{success:false,status:\"❗Please make sure quantity is bigger than 0.\"});case 2:if(!(nftQuantity>5)){_context2.next=4;break;}return _context2.abrupt(\"return\",{success:false,status:\"❗Please make sure quantity is less than or equal to 5.\"});case 4:_context2.next=6;return new web3.eth.Contract(contractABI,contractAddress);case 6:window.contract=_context2.sent;//set up your Ethereum transaction\ntransactionParameters={to:contractAddress,// Required except during contract publications.\nfrom:window.ethereum.selectedAddress,// must match user's active address.\nvalue:parseInt(web3.utils.toWei(\"0.05\",\"ether\")*nftQuantity).toString(16),data:window.contract.methods.mintPower(nftQuantity).encodeABI()//make call to NFT smart contract \n};//sign the transaction via Metamask\n_context2.prev=8;_context2.next=11;return window.ethereum.request({method:'eth_sendTransaction',params:[transactionParameters]});case 11:txHash=_context2.sent;return _context2.abrupt(\"return\",{success:true,status:\"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\"+txHash});case 15:_context2.prev=15;_context2.t0=_context2[\"catch\"](8);return _context2.abrupt(\"return\",{success:false,status:\"😥 Something went wrong: \"+_context2.t0.message});case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[8,15]]);}));return function mintPower(_x){return _ref2.apply(this,arguments);};}();export var getCurrentWalletConnected=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var addressArray;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!window.ethereum){_context3.next=17;break;}_context3.prev=1;_context3.next=4;return window.ethereum.request({method:\"eth_accounts\"});case 4:addressArray=_context3.sent;if(!(addressArray.length>0)){_context3.next=9;break;}return _context3.abrupt(\"return\",{address:addressArray[0],status:\"👆🏽 Sale is live above.\"});case 9:return _context3.abrupt(\"return\",{address:\"\",status:\"🦊 Connect to Metamask using the top right button.\"});case 10:_context3.next=15;break;case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](1);return _context3.abrupt(\"return\",{address:\"\",status:\"😥 \"+_context3.t0.message});case 15:_context3.next=18;break;case 17:return _context3.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{target:\"_blank\",rel:\"noreferrer\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]})})});case 18:case\"end\":return _context3.stop();}}},_callee3,null,[[1,12]]);}));return function getCurrentWalletConnected(){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/Macbook/nft-power/nft-minter-power/minter-starter-files/src/utils/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","contract","eth","Contract","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","message","mintPower","nftQuantity","success","transactionParameters","to","from","selectedAddress","value","parseInt","utils","toWei","toString","data","methods","encodeABI","params","txHash","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0xe3AB1Cd245DcCa8f9A54B0EcF86276271adFD993\";\nexport const contract = new web3.eth.Contract(contractABI, contractAddress);\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Sale is live above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const mintPower = async(nftQuantity) => {\n    //error handling\n    if (nftQuantity === 0) { \n           return {\n               success: false,\n               status: \"❗Please make sure quantity is bigger than 0.\",\n           }\n     }\n     if (nftQuantity > 5) { \n      return {\n          success: false,\n          status: \"❗Please make sure quantity is less than or equal to 5.\",\n      }\n}\n   \n     \n     //load smart contract\n     window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n   \n     //set up your Ethereum transaction\n const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: parseInt(web3.utils.toWei(\"0.05\",\"ether\") * nftQuantity).toString(16),\n    data: window.contract.methods.mintPower(nftQuantity).encodeABI() //make call to NFT smart contract \n};\n\n//sign the transaction via Metamask\ntry {\nconst txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    })\nreturn {\n    success: true,\n    status: \"✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" + txHash,\n\n}\n} catch (error) {\nreturn {\n    success: false,\n    status: \"😥 Something went wrong: \" + error.message\n}\n\n}\n   }\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Sale is live above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };"]},"metadata":{},"sourceType":"module"}